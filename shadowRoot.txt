selenium & get shadow root element

javascript:
function getElementsByXPath(xpath, parent)
{
    let results = [];
    let query = document.evaluate(xpath, parent || document,
        null, XPathResult.ORDERED_NODE_SNAPSHOT_TYPE, null);
    for (let i = 0, length = query.snapshotLength; i < length; ++i) {
        results.push(query.snapshotItem(i));
    }
    return results;
}


function querySelectorAllShadows(selector, el = document.body) {
  // recurse on childShadows
  const childShadows = Array.from(el.querySelectorAll('*')).
    map(el => el.shadowRoot).filter(Boolean);

  // console.log('[querySelectorAllShadows]', selector, el, `(${childShadows.length} shadowRoots)`);

  const childResults = childShadows.map(child => querySelectorAllShadows(selector, child));
  
  // fuse all results into singular, flat array
  if(selector.startsWith("*//") || selector.startsWith("//") || selector.startsWith(".//") )
  {
	//xpath
	const result = Array.from(getElementsByXPath(selector,el));
	return result.concat(childResults).flat().filter(obj => {  return obj.offsetWidth>2 && obj.offsetHeight>2 && !obj.hidden});
  }
  
  else
  {
  //css selector
  const result = Array.from(el.querySelectorAll(selector));
  return result.concat(childResults).flat().filter(obj => {  return obj.offsetWidth>2 && obj.offsetHeight>2 && !obj.hidden});
  }
}


// examples:
querySelectorAllShadows('td'); // all `td`s in body
querySelectorAllShadows('.btn') // all `.btn`s in body
querySelectorAllShadows('a', document.querySelector('#right-nav')); // all `a`s in right menu
querySelectorAllShadows("//span[.//.=\"starts here.\"]") //xpath as well
//C# selenium

IJavaScriptExecutor executor = (IJavaScriptExecutor)driver;
 IWebElement el = executor.ExecuteScript("querySelectorAllShadows('#myButtonID')[0]") as IWebElement;

 ///////////////////////////
 public static string GenerateACN()
    {
        int[] weights = { 8, 7, 6, 5, 4, 3, 2, 1 };
        int[] digits = new int[9];

        // Generate first 8 digits
        for (int i = 0; i < 8; i++)
        {
            digits[i] = random.Next(0, 10);
        }

        // Calculate sum of products
        int sum = 0;
        for (int i = 0; i < 8; i++)
        {
            sum += digits[i] * weights[i];
        }

        // Calculate check digit
        int remainder = sum % 10;
        int checkDigit = (10 - remainder) % 10;

        digits[8] = checkDigit;

        // Format as XXX XXX XXX
        return string.Format("{0}{1}{2} {3}{4}{5} {6}{7}{8}",
            digits[0], digits[1], digits[2],
            digits[3], digits[4], digits[5],
            digits[6], digits[7], digits[8]);
    }
